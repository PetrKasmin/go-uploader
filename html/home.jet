<!doctype html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport"
          content="width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Home</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta1/dist/css/bootstrap.min.css" rel="stylesheet"
          integrity="sha384-giJF6kkoqNQ00vy+HMDP7azOuL0xtbfIcaT9wjKHr8RbDVddVHyTfAAsrekwKmP1" crossorigin="anonymous">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/notie/4.3.1/notie.min.css"
          integrity="sha512-UrjLcAek5jbj1vwGbXkviPHtgSNVNQCedX7cBIMDdSI2iZtUcZcoTh2Sqc8R9mVcijOjFUi1IlxhfrE1uWaIog=="
          crossorigin="anonymous"/>
    <style>
        .file {
            outline: 1px solid silver;
            min-height: 160px;
            max-width: 460px;
            margin: 70px auto;
            border-radius: 5px;
            padding: 20px 50px;
        }

        .progress-bar {
            transition: width 0.2s ease;
        }
    </style>
</head>
<body>
<div class="container text-center">
    <div class="row">
        <div class="col align-self-center file">
            <div>
                <label for="formFile" class="form-label">Загрузчик файлов</label>
                <input class="form-control" type="file" id="formFile">
                <div class="progress mt-1" role="progressbar" aria-label="Example with label" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100">
                    <div id="progress" class="progress-bar" style="width: 0%">0%</div>
                </div>
            </div>
            <div class="mt-4">
                <label for="formFileHttp2" class="form-label">Загрузчик файлов http2</label>
                <input class="form-control" type="file" id="formFileHttp2">
                <div class="progress mt-1" role="progressbar" aria-label="Example with label" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100">
                    <div id="progressHttp2" class="progress-bar" style="width: 0%">0%</div>
                </div>
            </div>
            <div class="my-4">
                <label for="formFileWebsocket" class="form-label">Загрузчик файлов websocket</label>
                <input class="form-control" type="file" id="formFileWebsocket">
                <div class="progress mt-1" role="progressbar" aria-label="Example with label" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100">
                    <div id="progressWebsocket" class="progress-bar" style="width: 0%">0%</div>
                </div>
            </div>
        </div>
    </div>
</div>
</body>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta1/dist/js/bootstrap.bundle.min.js"
        integrity="sha384-ygbV9kiqUc6oa4msXn9868pTtWMgiQaeYH7/t7LECLbyPA2x65Kgf80OJFdroafW"
        crossorigin="anonymous"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/notie/4.3.1/notie.min.js"
        integrity="sha512-NHRCwRf2LnVSlLDejCA9oS3fG3/FLSQIPCjAWl3M7tVi5wszwr6FxkjotWnQDXLE+aLKcxRrzFDNEgXj9nvkPw=="
        crossorigin="anonymous"></script>

<script>
    const updateProgress = (progressBar, percent) => {
        progressBar.style.width = `${percent}%`;
        progressBar.innerText = `${Math.round(percent)}%`;
        console.log(progressBar.style.width)
    };

    // HTTP UPLOADER -------------------------------------------------------------------------------------------
    document.getElementById('formFile').addEventListener('change', handleFileSelect);

    function handleFileSelect(event) {
        const progressElement = document.getElementById('progress');
        updateProgress(progressElement, 0);

        const fileInput = event.target;
        const file = fileInput.files[0];

        if (file) {
            const chunkSize = 5 * 1024 * 1024; // 5 MB
            let totalBytesSent = 0;

            const uploadChunk = () => {
                const chunk = file.slice(totalBytesSent, totalBytesSent + chunkSize);
                const formData = new FormData();
                formData.append('file', chunk, file.name);

                fetch('/upload', {
                    method: 'POST',
                    body: formData
                })
                    .then(response => response.text())
                    .then(() => {
                        totalBytesSent += chunk.size;
                        const percent = (totalBytesSent / file.size) * 100;
                        updateProgress(progressElement, percent);

                        if (totalBytesSent < file.size) {
                            uploadChunk();
                        }
                    })
                    .catch(error => {
                        console.error(error);
                    });
            };

            uploadChunk();
        }
    }


    // HTTP2 UPLOADER ------------------------------------------------------------------------------------------
    document.getElementById('formFileHttp2').addEventListener('change', handleFileSelectHttp2);

    async function uploadFileHttp2(file) {
        const progressElement = document.getElementById('progressHttp2');
        updateProgress(progressElement, 0);

        const chunkSize = 5 * 1024 * 1024; // 5 MB

        const uploadChunk = async (start) => {
            const end = Math.min(start + chunkSize, file.size);
            const chunk = file.slice(start, end);

            const formData = new FormData();
            formData.append('file', chunk, file.name);
            formData.append('totalSize', file.size);

            const response = await fetch('/upload-http2', {
                method: 'POST',
                body: formData,
            });

            if (!response.ok) {
                throw new Error(`HTTP error! Status: ${response.status}`);
            }

            return response.text();
        };

        const evtSource = new EventSource('/upload-progress');

        evtSource.onmessage = function (event) {
            const percent = parseInt(event.data);
            if (!isNaN(percent)) {
                updateProgress(progressElement, percent);
            }

            if (percent >= 100) {
                evtSource.close();
            }
        };

        evtSource.onerror = function () {
            evtSource.close();
        };

        let start = 0;

        while (start < file.size) {
            await uploadChunk(start);
            start += chunkSize;
        }
    }

    function handleFileSelectHttp2(event) {
        const fileInput = event.target;
        const file = fileInput.files[0];

        if (file) {
            uploadFileHttp2(file);
        }
    }

    // WEBSOCKET UPLOADER ---------------------------------------------------------------------------------------
    document.getElementById('formFileWebsocket').addEventListener('change', handleFileSelectWebsocket);

    function handleFileSelectWebsocket(event) {
        const progressElement = document.getElementById('progressWebsocket');
        updateProgress(progressElement, 0);

        const fileInput = event.target;
        const file = fileInput.files[0];

        if (file) {
            const socket = new WebSocket('ws://localhost:3000/upload-websocket');
            socket.binaryType = 'arraybuffer';

            socket.onopen = () => {
                console.log('Соединение с WebSocket открыто.');

                socket.send(JSON.stringify({
                    filename: file.name,
                    filesize: file.size,
                }));

                const chunkSize = 1024 * 1024; // 1 MB
                let offset = 0;

                const readNextChunk = () => {
                    const chunk = file.slice(offset, offset + chunkSize);
                    socket.send(chunk);

                    offset += chunkSize;

                    if (offset < file.size) {
                        readNextChunk();
                    }
                };

                readNextChunk();
            };

            socket.onmessage = (msg) => {
                const percent = parseInt(msg.data, 10);
                if (!isNaN(percent)) {
                    updateProgress(progressElement, percent);
                }

                if (percent >= 100) {
                    socket.close();
                }
            }

            socket.onclose = () => {
                console.log('Соединение с WebSocket закрыто.');
            };

            socket.onerror = function (error) {
                console.error(error);
            };
        }
    }
</script>
</html>